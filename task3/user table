-- user table


CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    password VARCHAR(255),
    role ENUM('admin', 'user') DEFAULT 'user'
);


-- product table 


CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    description TEXT,
    price DECIMAL(10,2),
    stock INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- oders table 

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    total_price DECIMAL(10,2),
    status ENUM('pending', 'shipped', 'delivered', 'cancelled') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);


-- orders-items table

CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);


--  Fetch all products with more than 10 stock:

SELECT * FROM products WHERE stock > 10;


-- Fetch all orders placed by a specific user (e.g., user_id = 5):

SELECT * FROM orders WHERE user_id = 5;


-- Update product stock after an order is placed

UPDATE products SET stock = stock - 3 WHERE id = 2;



-- user.php

public function orders() {
    return $this->hasMany(Order::class);
}


-- order.php

public function user() {
    return $this->belongsTo(User::class);
}

public function orderItems() {
    return $this->hasMany(OrderItem::class);
}

-- product.php

public function orderItems() {
    return $this->hasMany(OrderItem::class);
}

-- order-item.php

public function order() {
    return $this->belongsTo(Order::class);
}

public function product() {
    return $this->belongsTo(Product::class);
}
